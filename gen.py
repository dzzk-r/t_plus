import logging
import sys
import os

# ==============================
# üîß –§–ò–ö–° –õ–û–ì–ì–ï–†–ê (—É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
# ==============================
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)

METRICS_FILE = "metrics.log"

# ==============================
# üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
# ==============================
logger = logging.getLogger("TTS_LOGGER")
logger.setLevel(logging.INFO)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º INFO –∏ –≤—ã—à–µ

# –õ–æ–≥ –≤ —Ñ–∞–π–ª (–±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏!)
file_handler = logging.FileHandler(METRICS_FILE, mode="a", encoding="utf-8", delay=False)
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
logger.addHandler(file_handler)

# –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
logger.addHandler(console_handler)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
def flush_logs():
    for handler in logger.handlers:
        handler.flush()
    sys.stdout.flush()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–æ–≥
logger.info("\n\n===== –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ =====")
flush_logs()


import torch
import sys
import time
import os
import psutil
import logging
from TTS.api import TTS
from TTS.tts.models.xtts import XttsAudioConfig
from TTS.tts.configs.xtts_config import XttsConfig
from TTS.config.shared_configs import BaseDatasetConfig
from TTS.tts.models.xtts import XttsArgs

# ==============================
# –ù–ê–°–¢–†–û–ô–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø
# ==============================
os.environ["PYTORCH_ENABLE_MPS_FALLBACK"] = "1"  # –î–ª—è Mac MPS

# ==============================
# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ==============================
FORCE_DEVICE = os.getenv("FORCE_DEVICE", "").lower()
METRICS_FILE = "metrics.log"  # –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤


# ==============================
# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê –î–õ–Ø –ú–û–î–ï–õ–ò
# ==============================
if FORCE_DEVICE == "cuda" and torch.cuda.is_available():
    device = "cuda"
    torch.backends.cudnn.benchmark = True  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è RTX 4090, 4080, 3090
elif FORCE_DEVICE == "mps" and torch.backends.mps.is_available():
    device = "mps"
elif FORCE_DEVICE == "cpu":
    device = "cpu"
else:
    # –ê–≤—Ç–æ–≤—ã–±–æ—Ä, –µ—Å–ª–∏ FORCE_DEVICE –Ω–µ —É–∫–∞–∑–∞–Ω
    if torch.cuda.is_available():
        device = "cuda"
        torch.backends.cudnn.benchmark = True
    elif torch.backends.mps.is_available():
        device = "mps"
    else:
        device = "cpu"

# ==============================
# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê –î–õ–Ø –ê–£–î–ò–û –û–ë–†–ê–ë–û–¢–ö–ò
# ==============================
if device == "cuda" and torch.cuda.is_available():
    audio_device = "cuda"
elif device == "mps" and torch.backends.mps.is_available():
    audio_device = "mps"
else:
    audio_device = "cpu"

print(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –º–æ–¥–µ–ª–∏: {device}")
print(f"üéô –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞—É–¥–∏–æ: {audio_device}")
logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –º–æ–¥–µ–ª–∏: {device}")
logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞—É–¥–∏–æ: {audio_device}")

# ==============================
# –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò
# ==============================
start_load_time = time.time()
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2")
tts.to(device)
end_load_time = time.time()
load_time = end_load_time - start_load_time

print(f"‚è≥ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {load_time:.2f} —Å–µ–∫")
logger.info(f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {load_time:.2f} —Å–µ–∫")

# ==============================
# –ó–ê–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò
# ==============================
process = psutil.Process(os.getpid())
mem_before = process.memory_info().rss / (1024 * 1024)  # MB

# ==============================
# –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–û–ì–û –§–ê–ô–õ–ê
# ==============================
speaker_wav = "daniel.wav"
if os.path.exists(speaker_wav):
    print(f"üéôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –∏–∑ —Å–µ–º–ø–ª–∞ {speaker_wav}")
else:
    print(f"‚ö†Ô∏è  –§–∞–π–ª {speaker_wav} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ–ª–æ—Å.")
    speaker_wav = None

# ==============================
# –¢–ï–ö–°–¢ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò
# ==============================
text = sys.argv[1] if len(sys.argv) > 1 else "–ü—Ä–∏–≤–µ—Ç, –í–∞—Å—è! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"
print(f"üì¢ –¢–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {text}")

# ==============================
# –ó–ê–ú–ï–† –í–†–ï–ú–ï–ù–ò –ì–ï–ù–ï–†–ê–¶–ò–ò
# ==============================
start_gen_time = time.time()

tts.tts_to_file(
    text=text,
    file_path="output.wav",
    language="ru",
    speaker_wav=speaker_wav if speaker_wav else None,
    speaker="ru" if not speaker_wav else None,
)

end_gen_time = time.time()
gen_time = end_gen_time - start_gen_time

# ==============================
# –ó–ê–ú–ï–† –ü–ê–ú–Ø–¢–ò –ü–û–°–õ–ï –ì–ï–ù–ï–†–ê–¶–ò–ò
# ==============================
mem_after = process.memory_info().rss / (1024 * 1024)  # MB

# ==============================
# –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê
# ==============================
file_size = os.path.getsize("output.wav") / (1024 * 1024)  # MB

# ==============================
# FPS –∏ TFLOPS (–µ—Å–ª–∏ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞)
# ==============================
fps = 1 / gen_time if gen_time > 0 else 0
if torch.cuda.is_available():
    gpu_name = torch.cuda.get_device_name(0)
    gpu_tf_per_sec = (
                             torch.cuda.get_device_properties(0).multi_processor_count * 64 * 2 * 1.8
                     ) / 1000  # TFLOPS
else:
    gpu_name = "N/A"
    gpu_tf_per_sec = 0

# ==============================
# –í–´–í–û–î –ú–ï–¢–†–ò–ö
# ==============================
print("\nüîç **–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**")
print(f"‚è≥ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {load_time:.2f} —Å–µ–∫")
print(f"‚öôÔ∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {gen_time:.2f} —Å–µ–∫")
print(f"üìä FPS (–∫–∞–¥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É): {fps:.2f}")
print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–¥–æ/–ø–æ—Å–ª–µ): {mem_before:.2f} MB ‚Üí {mem_after:.2f} MB")
print(f"üìÇ –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size:.2f} MB")
print(f"‚ö° CPU –∑–∞–≥—Ä—É–∑–∫–∞: {psutil.cpu_percent()}%")
print(f"üñ•Ô∏è GPU: {gpu_name}")
print(f"üî• TFLOPS (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ): {gpu_tf_per_sec:.2f} TFLOPS")

if torch.cuda.is_available():
    print(
        f"üî• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏: {torch.cuda.memory_allocated() / (1024 * 1024):.2f} MB"
    )
    print(
        f"‚ö° –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å GPU: {torch.cuda.memory_reserved() / (1024 * 1024):.2f} MB"
    )

# ==============================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í `metrics.log`
# ==============================
logger.info(f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {load_time:.2f} —Å–µ–∫")
logger.info(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {gen_time:.2f} —Å–µ–∫")
logger.info(f"FPS: {fps:.2f}")
logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–¥–æ/–ø–æ—Å–ª–µ): {mem_before:.2f} MB ‚Üí {mem_after:.2f} MB")
logger.info(f"–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size:.2f} MB")
logger.info(f"CPU –∑–∞–≥—Ä—É–∑–∫–∞: {psutil.cpu_percent()}%")
logger.info(f"GPU: {gpu_name}")
logger.info(f"TFLOPS (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ): {gpu_tf_per_sec:.2f} TFLOPS")

if torch.cuda.is_available():
    logger.info(
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏: {torch.cuda.memory_allocated() / (1024 * 1024):.2f} MB"
    )
    logger.info(
        f"–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å GPU: {torch.cuda.memory_reserved() / (1024 * 1024):.2f} MB"
    )

print("‚úÖ –§–∞–π–ª output.wav —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
logger.info("–§–∞–π–ª output.wav —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

# ==============================
# üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
# ==============================
flush_logs()
logging.shutdown()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
sys.exit(0)  # –í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞