import timeit
import tensorflow as tf
import os

# --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TensorFlow –∏ MPS ---
print(f"TensorFlow version: {tf.__version__}")
print(f"GPU available: {len(tf.config.list_physical_devices('GPU')) > 0}")

# --- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–º—è—Ç–∏ MPS ---
gpus = tf.config.list_physical_devices('GPU')
if gpus:
    try:
        tf.config.experimental.set_memory_growth(gpus[0], True)
        print("‚úÖ MPS memory growth enabled")
    except RuntimeError as e:
        print(f"‚ö†Ô∏è Could not set memory growth: {e}")

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–æ–≤ ---
def create_tf_tensors(device, size=4096):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–Ω–∑–æ—Ä—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."""
    with tf.device(device):
        x = tf.random.uniform((size, size), dtype=tf.float32)
        y = tf.random.uniform((size, size), dtype=tf.float32)
    return x, y

def benchmark():
    # --- CPU Benchmark ---
    print("\nüîπ **CPU Benchmark**")
    x_cpu, y_cpu = create_tf_tensors("/CPU:0")
    _ = x_cpu * y_cpu  # –ü—Ä–æ–≥—Ä–µ–≤
    cpu_time = timeit.timeit(lambda: x_cpu * y_cpu, number=10)
    print(f"CPU Time (10 –∏—Ç–µ—Ä–∞—Ü–∏–π): {cpu_time:.4f}s")

    # --- GPU Benchmark (MPS) ---
    if not gpus:
        print("‚ùå GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç GPU")
        return

    print("\nüîπ **GPU Benchmark (MPS)**")
    x_gpu, y_gpu = create_tf_tensors("/GPU:0")
    _ = x_gpu * y_gpu  # –ü—Ä–æ–≥—Ä–µ–≤
    tf.identity(x_gpu).numpy()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

    def gpu_op():
        _ = x_gpu * y_gpu
        tf.identity(x_gpu).numpy()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

    gpu_time = timeit.timeit(gpu_op, number=10)
    print(f"GPU Time (10 –∏—Ç–µ—Ä–∞—Ü–∏–π): {gpu_time:.4f}s")

    # --- Metal mGPU Benchmark (–±–µ–∑ `@tf.function`) ---
    print("\nüîπ **mGPU Benchmark (tf.linalg.matmul, NO @tf.function)**")
    def mgpu_op():
        out = tf.linalg.matmul(x_gpu, y_gpu)
        tf.identity(out).numpy()  # –Ø–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        return out

    _ = mgpu_op()  # –ü—Ä–æ–≥—Ä–µ–≤
    mgpu_time = timeit.timeit(mgpu_op, number=10)
    print(f"mGPU Time (10 –∏—Ç–µ—Ä–∞—Ü–∏–π): {mgpu_time:.4f}s")

    # --- –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ (–≤–∞–∂–Ω–æ –¥–ª—è MPS) ---
    tf.keras.backend.clear_session()
    print("\n‚úÖ **Benchmark completed!**\n")

if __name__ == "__main__":
    benchmark()
